name: GitHub Actions Demo for VulnNodeApp
run-name: ${{ github.actor }} is test this App ðŸš€
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.2 

  semgrep-sast:
    name: SAST Semgrep
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    container: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v3
      - run: semgrep ci --sarif --output=semgrep.sarif || true
        env:
            SEMGREP_RULES: p/default
      - run: semgrep ci --json --output=semgrep.json || true
        env:
          SEMGREP_RULES: p/default
      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'semgrep.sarif'
      - name: Semgrep Report
        uses: actions/upload-artifact@v3
        with:
          name: semgrep.json
          path: semgrep.json

  npmaudit:
    name: npm audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup nodev16
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Run npmaudit
      run: npm audit --registry=https://registry.npmjs.org  --json > report_npmaudit.json
      continue-on-error: true   
    - name: Upload npmaudit artifact
      uses: actions/upload-artifact@v3
      with:
        name: npm audit
        path: report_npmaudit.json 

  njsscan:
    runs-on: ubuntu-latest
    name: njsscan check
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2
    - name: nodejsscan scan
      id: njsscan
      uses: ajinabraham/njsscan-action@master
      with:
        args: '.'

  Scan_trivy:
    name: Scan image Trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json

  deploy_EC2:
    name: Push to EC2 Instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v1

      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: "./"
          REMOTE_HOST: "${{ secrets.EC2_HOST }}"
          REMOTE_USER: "${{ secrets.EC2_USER }}"
          TARGET: "${{ secrets.EC2_PATH }}"
        

  DAST_OWASPZAP:
      runs-on: ubuntu-latest
      #needs: Deploy
      name: Run DAST scan on the web application
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            ref: master
        - name: Run ZAP Scan with zap2docker-stable full-scan
          uses: zaproxy/action-full-scan@v0.5.1
          with:
            docker_name: 'owasp/zap2docker-stable'
            target: 'NOMBREAPP'
            rules_file_name: '.zap/rules.tsv'
            cmd_options: '-a'
            artifact_name: 'zap-dast'
            allow_issue_writing: false
        - name: Upload ZAP artifact
          uses: actions/upload-artifact@v3
          with:
            name: zap-dast
            path: zap-dast